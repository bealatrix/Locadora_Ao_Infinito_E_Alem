@page "/locarFilme"
@using Locadora_Ao_Infinito_E_Alem.Controllers
@using Locadora_Ao_Infinito_E_Alem.Models
@inject ClienteController clienteController;
@inject FilmeController filmeController;
@inject LocacaoFilmeController locacaoFilmeController;
@inject FuncionarioController funcionarioController;
@inject LocacaoController locacaoController;
@inject NavigationManager navegacao;


<div class="container">
    <!-- Formulário de Locação de Filmes -->
    <h2 class="mt-4 text-center text-warning">Cadastro de Locação de Filmes</h2>

    @if (erro)
    {
        <div class="alert alert-dark mt-3" role="alert">
            @texto
        </div>
    } else
    {
        <!-- Mensagem de Sucesso -->
        @if (sucesso)
        {
            <div class="alert alert-success mt-3" role="alert">
                Locação salva com sucesso!
            </div>
        } else
        {
            <div class="row">

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="selectCliente" class="form-label">Selecione o Cliente:</label>
                            <select class="form-control" id="selectCliente" @onchange="selecionarCliente">
                                <option value=null disabled selected> Selecione um Cliente </option>
                                @foreach (var item in listaCliente)
                                {
                                    <option value=@item.ID>@item.nome</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="selectFuncionario" class="form-label">Selecione o Funcionário:</label>
                            <select class="form-control" @onchange="selecionarFuncionario" id="selectFuncionario">
                                <option value=null disabled selected> Selecione um Funcionário </option>
                                @foreach (var item in listaFuncionario)
                                {
                                    <option value=@item.ID>@item.nome</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="dataInicioLocacaoInput" class="form-label">Data de Locação (Hoje)</label>
                        <input disabled @bind="locacao.data_locacao" type="date" class="form-control" id="dataInicioLocacaoInput">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="dataFimLocacaoInput" class="form-label">Data de Devolução:</label>
                        <input @onchange="calcularValorFinal" type="date" class="form-control" id="dataFimLocacaoInput">
                    </div>
                </div>
            </div>

            <hr/>

            <div class="mb-3">
                <label for="selectFilme" class="form-label">Selecione um filme:</label>
                <select class="form-control" id="selectFilme" @onchange="selecionarFilme">
                    <option value=null disabled selected> Selecione um Filme </option>
                    @foreach (var item in listaFilme)
                    {
                        <option value=@item.ID>@item.titulo</option>
                    }
                </select>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="inputEstoque" class="form-label">Estoque do filme:</label>
                        <input @bind-value=@filme.estoque disabled type="number" class="form-control" id="inputEstoque">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="quantidadeInput" class="form-label">Quantidade:</label>
                        <input @onchange="modificarValorFinal" type="number" class="form-control" id="quantidadeInput" placeholder="Informe a quantidade desse filme para locar">
                    </div>
                </div>
            </div>

            

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="valorInput" class="form-label">Valor do Filme:</label>
                        <input @bind-value=@filme.preco type="number" step="0.01" class="form-control" id="valorInput" readonly>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="valorInput" class="form-label">Valor Total:</label>
                        <input @bind-value=@valorTotalDias type="number" step="0.01" class="form-control" id="valorInput" readonly>
                    </div>
                </div>
            </div>
        }
    }

    <!-- Botões de Ação -->
    <div class="d-flex justify-content-center">
        <button type="button" class="btn btn-primary mt-3 mx-2" @onclick="adicionarFilme">Adicionar filme à locação</button>
        <button type="button" class="btn btn-outline-primary mt-3 mx-2" @onclick="locarFilmes">Registrar locação</button>
        <button type="button" class="btn btn-secondary mt-3 mx-2" @onclick="novoRegistro">Novo Registro</button>
    </div>

    @if (locacaoFilmesLista != null)
    {
        <!-- Tabela de Locações -->
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Filme</th>
                    <th>Quantidade</th>
                    <th>Valor</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in locacaoFilmesLista)
                {
                    <tr>
                        <td>@item.Filme.titulo</td>
                        <td>@item.quantidade</td>
                        <td>@item.valor</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th scope="row">Valor total da locação</th>
                    <td> </td>
                    <td>@valorTotalLocacao</td>
                </tr>
            </tfoot>

        </table>
    }
</div>


@code {
    private List<Cliente>? listaCliente = new List<Cliente>();
    private List<Filme>? listaFilme = new List<Filme>();
    private List<Funcionario>? listaFuncionario = new List<Funcionario>();
    private List<LocacaoFilme>? locacaoFilmesLista = new List<LocacaoFilme>();

    private LocacaoFilme locacaoFilme = new LocacaoFilme();
    private Cliente cliente = new Cliente();
    private Funcionario funcionario = new Funcionario();
    private Filme filme = new Filme();
    private Locacao locacao = new Locacao();

    private int quantidade = 0;
    private decimal valorTotalDias=0;
    private string texto;
    private bool sucesso = false;
    private bool erro = false;
    private bool liberado = false;
    private decimal valorTotalLocacao;


    protected override async Task OnInitializedAsync()
    {
        listaCliente = await clienteController.ListarClientes();
        listaFilme = await filmeController.ListarFilmes();
        listaFuncionario = await funcionarioController.ListarFuncionarios();
        locacao.data_locacao = DateTime.Today;

        sucesso = false;
        erro = false;
        liberado = true;
        texto = "Ocorreu um erro ao salvar os dados. Verifique se todos os campos foram preenchidos.";
    }

    public void modificarValorFinal(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            quantidade = Convert.ToInt32(e.Value.ToString());
            valorTotalDias = quantidade * filme.preco;
        }
    }

    public void calcularValorFinal(ChangeEventArgs e)
    {
        locacao.data_devolucao = DateTime.Parse(e.Value.ToString());
        if (locacao.data_locacao != null && DateTime.Compare(locacao.data_locacao, DateTime.Today.Date) >= 0 && DateTime.Compare(locacao.data_devolucao, DateTime.Today.Date) > 0)
        {
            locacaoFilme.valor = quantidade * filme.preco;

            erro = false;
            liberado = true;
        } else
        {
            texto = "A data de locação não pode ser menor do que a data atual e ambas as datas devem estar preenchidas.";
            erro = true;
            liberado = false;
        }
    }

    public void adicionarFilme()
    {
        if (quantidade <= filme.estoque)
        {
            if (locacaoFilmesLista.FindIndex(x => x.Filme.titulo == filme.titulo) < 0)
            {
                erro = false;
                locacaoFilme.quantidade = quantidade;
                locacaoFilme.valor = quantidade * filme.preco;
                valorTotalLocacao = valorTotalLocacao + locacaoFilme.valor;
                locacaoFilme.Filme = filme;
                locacaoFilmesLista.Add(locacaoFilme);

                //Após adicionar o filme para a lista de preparação para a locação, remove esse filme da lista de filmes para selecionar
                listaFilme.Remove(filme);

                quantidade = 0;
                valorTotalDias = 0;
                filme = new Filme();
                locacaoFilme = new LocacaoFilme();
            } 
        } else
        {
            texto = "O estoque atual disponível para este filme é de " + filme.estoque + " unidades. Insira um valor igual ou inferior a este.";
            erro = true;
        }
    }

    public async Task locarFilmes()
    {
        if (locacaoFilmesLista != null)
        {
            locacao.valor_total = valorTotalLocacao;
            locacao.Cliente = cliente;
            locacao.Funcionario = funcionario;
            locacao.Status = "Ativa";

            await locacaoController.CadastrarLocacao(locacao);
            await locacaoController.SalvarAlteracoes();

            //Locacao ultima_locacao = await locacaoController.BuscarUltimaLocacao();

            //Adiciona o id de locação para as locações_filmes
            foreach (var item in locacaoFilmesLista)
            {
                item.Locacao = locacao;
            }

            await locacaoFilmeController.CadastrarLocacaoFilme(locacaoFilmesLista);
            await locacaoFilmeController.SalvarAlteracoes();

            sucesso = true;
        }
        else
        {
            texto = "Para realizar uma locação, primeiro adicione Filmes à lista, selecione um Funcionário e um Cliente.";
            erro = true;
        }
    }

    public void selecionarCliente(ChangeEventArgs e)
    {
        int id = Convert.ToInt32(e.Value.ToString());
        cliente = listaCliente.Where(cli => cli.ID == id).FirstOrDefault();
    }

    public void selecionarFuncionario(ChangeEventArgs e)
    {
        int id = Convert.ToInt32(e.Value.ToString());
        funcionario = listaFuncionario.Where(func => func.ID == id).FirstOrDefault();
    }

    public void selecionarFilme(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            int id = Convert.ToInt32(e.Value.ToString());
            filme = listaFilme.Where(fil => fil.ID == id).FirstOrDefault();
        }
        
    }

    public async Task novoRegistro()
    {
        navegacao.NavigateTo("/locarFilme", forceLoad: true);
    }
}
